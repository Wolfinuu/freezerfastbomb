1. Objetivo do ProjetoGere um código completo para um sistema de Controle Térmico de Freezer (FAST BOMBAS) em Python, utilizando o framework Streamlit para criar um Dashboard Web interativo. O sistema deve simular a coleta de dados via porta serial (Arduino) e enviar notificações automáticas. O código deve ser modular e bem comentado.2. Requisitos Técnicos e FuncionaisA. Simulação (Arduino IDE)Crie um código de simulação em C++ (Arduino IDE) que envie dados pela porta serial.A simulação deve gerar valores de temperatura (float) que oscilem dentro da faixa operacional de um freezer (ex: $-20^\circ\text{C}$ a $-15^\circ\text{C}$).O código deve, de forma aleatória, simular uma falha (variação crítica), elevando a temperatura para níveis acima de $-10^\circ\text{C}$ 1111 por um período.Os dados devem ser enviados via Serial a cada 5 segundos no formato Temperatura: XX.XX2222.B. Dashboard Web (Python/Streamlit)Desenvolva uma aplicação Python utilizando a biblioteca Streamlit (ou Dash, se Streamlit não for possível)333333.O Dashboard deve ser o ponto central para visualização em tempo real dos dados coletados444.Elementos Visuais Obrigatórios:Um indicador principal mostrando a Temperatura Atual (valor grande e negrito)5.Um gráfico de linha (Line Chart) que exiba o Histórico da Temperatura ao longo do tempo (últimos 30 pontos/leituras)6.Um indicador visual (LED ou ícone) para o Status do Freezer (Ex: Verde = OK, Vermelho = Crítico).Exibir a Hora da Última Leitura7777.O Dashboard deve ser capaz de atualizar automaticamente a cada 5 segundos, simulando o monitoramento contínuo8.C. Lógica de Controle e Notificações (Python)O sistema Python deve ler os dados simulados da porta serial (utilizando pyserial)9999.Limiar Crítico: Defina a temperatura crítica em $-10^\circ\text{C}$ (simulando a necessidade de alerta para evitar perdas)101010101010.Notificação por E-mail:Se a temperatura ultrapassar $-10^\circ\text{C}$, o sistema deve enviar um alerta por e-mail (utilizando smtplib ou similar)11111111111111111111111111111111.O e-mail deve incluir a temperatura registrada e o horário do evento12121212.Implemente uma lógica de Cooldown (Resfriamento) para enviar o e-mail apenas uma vez a cada 15 minutos, para evitar spam13.Notificação por WhatsApp (Simulação):Como a integração real com APIs de WhatsApp é complexa, simule o disparo: se a temperatura for crítica, imprima no terminal do Streamlit a mensagem: [ALERTA WHATSAPP SIMULADO] Temperatura Crítica: XX.XX°C. Acionar o proprietário Leonardo imediatamente.14141414141414141414141414141414.3. Estrutura do Código e ModularidadeCrie uma classe ou módulo Python para lidar com a Comunicação Serial e Leitura de Dados.Crie um módulo ou função separada para o Sistema de Notificações (E-mail e WhatsApp)15.O código principal deve ser o script do Streamlit, integrando as outras partes16.4. Considerações FinaisInclua instruções claras sobre as bibliotecas Python necessárias (pyserial, streamlit, pandas, plotly ou matplotlib, smtplib).Inclua uma seção de Configurações para fácil alteração da Porta Serial, E-mail do remetente/destinatário e Senha de aplicativo/API Key.Priorize a usabilidade do código e a clareza dos comentários para fins de demonstração acadêmica17.