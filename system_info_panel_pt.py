"""
M√≥dulo do Painel de Informa√ß√µes do Sistema
Exibe status do sistema, diagn√≥sticos e informa√ß√µes
"""

import streamlit as st
from datetime import datetime
import os
from config_manager import ConfigManager
from data_simulator import TemperatureSimulator
from email_notifier import EmailNotifier
from data_logger import DataLogger

def show_system_info_panel(config: ConfigManager, simulator: TemperatureSimulator, 
                           notifier: EmailNotifier, logger: DataLogger):
    """Exibir informa√ß√µes do sistema e diagn√≥sticos"""
    st.title("‚ÑπÔ∏è Informa√ß√µes do Sistema")
    st.markdown("Status do sistema, diagn√≥sticos e informa√ß√µes t√©cnicas")
    
    # Status do Sistema
    st.subheader("üîå Status do Sistema")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Configura√ß√£o", "‚úì Carregada")
        config_file_exists = os.path.exists('freezer_config.json')
        st.metric("Arquivo de Config", "‚úì Encontrado" if config_file_exists else "‚úó N√£o Encontrado")
    
    with col2:
        csv_path = config.get('data_logging', 'csv_file_path')
        csv_exists = os.path.exists(csv_path)
        st.metric("Logger de Dados", "‚úì Ativo" if csv_exists else "‚ö† Sem Dados Ainda")
        if csv_exists:
            file_size = os.path.getsize(csv_path)
            st.metric("Tamanho do Arquivo de Log", f"{file_size / 1024:.2f} KB")
    
    with col3:
        email_configured = (
            config.get('email_config', 'sender_email') and
            os.environ.get('SMTP_PASSWORD') and
            len(config.get('email_config', 'recipient_emails')) > 0
        )
        st.metric("Alertas por E-mail", "‚úì Configurado" if email_configured else "‚ö† N√£o Configurado")
        st.metric("Simulador", "‚úì Rodando")
    
    st.markdown("---")
    
    # Informa√ß√µes do Freezer
    st.subheader("üè≠ Informa√ß√µes do Freezer")
    info_data = {
        "Modelo": config.get('freezer_info', 'model_name'),
        "Localiza√ß√£o": config.get('freezer_info', 'location'),
        "Operador": config.get('freezer_info', 'operator_name'),
        "Contato": config.get('freezer_info', 'operator_contact'),
    }
    for label, value in info_data.items():
        st.text(f"{label}: {value}")
    
    st.markdown("---")
    
    # Resumo da Configura√ß√£o
    st.subheader("‚öôÔ∏è Resumo da Configura√ß√£o")
    config_tabs = st.tabs(["Limites de Temperatura", "Coleta de Dados", "Alertas", "Registro"])
    
    with config_tabs[0]:
        st.markdown("**Zona do Evaporador**")
        evap = config.get('temperature_thresholds', 'evaporator')
        st.text(f"Faixa Normal: {evap['min']}¬∞C a {evap['max']}¬∞C")
        st.text(f"Limites Cr√≠ticos: {evap['critical_low']}¬∞C a {evap['critical_high']}¬∞C")
        st.markdown("**Zona do Condensador**")
        cond = config.get('temperature_thresholds', 'condenser')
        st.text(f"Faixa Normal: {cond['min']}¬∞C a {cond['max']}¬∞C")
        st.text(f"Limites Cr√≠ticos: {cond['critical_low']}¬∞C a {cond['critical_high']}¬∞C")
        st.markdown("**Zona Ambiente**")
        amb = config.get('temperature_thresholds', 'ambient')
        st.text(f"Faixa Normal: {amb['min']}¬∞C a {amb['max']}¬∞C")
        st.text(f"Limites Cr√≠ticos: {amb['critical_low']}¬∞C a {amb['critical_high']}¬∞C")
    
    with config_tabs[1]:
        st.text(f"Intervalo de Leitura: {config.get('data_collection', 'reading_interval_seconds')} segundos")
        st.text(f"Intervalo de Atualiza√ß√£o: {config.get('data_collection', 'chart_refresh_interval_seconds')} segundos")
        st.text(f"Pontos de Dados do Gr√°fico: {config.get('data_collection', 'max_data_points_display')}")
    
    with config_tabs[2]:
        alerts_enabled = "Ativado" if config.get('alert_settings', 'enable_email_alerts') else "Desativado"
        st.text(f"Alertas por E-mail: {alerts_enabled}")
        st.text(f"Tempo de Espera de Alerta: {config.get('alert_settings', 'alert_cooldown_seconds')} segundos")
        st.text(f"Limite de Acionamento: {config.get('alert_settings', 'consecutive_readings_trigger')} leituras")
        if email_configured:
            st.text(f"Servidor SMTP: {config.get('email_config', 'smtp_server')}:{config.get('email_config', 'smtp_port')}")
            st.text(f"Remetente: {config.get('email_config', 'sender_email')}")
            st.text(f"Destinat√°rios: {len(config.get('email_config', 'recipient_emails'))}")
    
    with config_tabs[3]:
        logging_enabled = "Ativado" if config.get('data_logging', 'enable_csv_logging') else "Desativado"
        st.text(f"Registro CSV: {logging_enabled}")
        st.text(f"Arquivo de Log: {config.get('data_logging', 'csv_file_path')}")
        st.text(f"Reten√ß√£o: {config.get('data_logging', 'retention_days')} dias")
    
    st.markdown("---")
    
    # Status do Simulador
    st.subheader("üî¨ Status do Simulador")
    col1, col2 = st.columns(2)
    
    with col1:
        st.text(f"Modo de Falha: {'Ativo' if simulator.failure_mode else 'Inativo'}")
        st.text(f"Probabilidade de Falha: {config.get('simulation', 'failure_probability') * 100}%")
        st.text(f"Dura√ß√£o da Falha: {config.get('simulation', 'failure_duration_seconds')}s")
    
    with col2:
        st.text(f"Faixa Normal: {config.get('simulation', 'normal_temp_evaporator_min')}¬∞C a {config.get('simulation', 'normal_temp_evaporator_max')}¬∞C")
        st.text(f"Varia√ß√£o de Temperatura: ¬±{config.get('simulation', 'temp_variation_range')}¬∞C")
    
    st.markdown("**√öltimas Temperaturas Registradas:**")
    for zone, temp in simulator.last_temperatures.items():
        zone_names = {'evaporator': 'Evaporador', 'condenser': 'Condensador', 'ambient': 'Ambiente'}
        st.text(f"{zone_names.get(zone, zone.capitalize())}: {temp:.2f}¬∞C")
    
    if st.button("Redefinir Simulador", key="reset_simulator"):
        simulator.reset_simulator()
        st.success("‚úì Simulador redefinido para estado inicial")
    
    st.markdown("---")
    
    # Diagn√≥sticos do Sistema
    st.subheader("üîç Diagn√≥sticos do Sistema")
    diagnostics = {
        "Arquivo de Config": "‚úì OK" if os.path.exists('freezer_config.json') else "‚úó Ausente",
        "Diret√≥rio de Dados": "‚úì OK" if os.path.exists('data') else "‚ö† N√£o Criado",
        "Diret√≥rio de Exporta√ß√£o": "‚úì OK" if os.path.exists('exports') else "‚ö† N√£o Criado",
        "Arquivo de Log CSV": "‚úì OK" if csv_exists else "‚ö† N√£o Criado",
    }
    
    for check, status in diagnostics.items():
        col1, col2 = st.columns([3, 1])
        with col1:
            st.text(check)
        with col2:
            if "‚úì" in status:
                st.success(status)
            elif "‚ö†" in status:
                st.warning(status)
            else:
                st.error(status)
    
    st.markdown("---")
    
    # Se√ß√£o Sobre
    st.subheader("üìñ Sobre")
    st.markdown("""
    **FAST BOMBAS - Sistema de Controle T√©rmico de Freezer**
    
    Vers√£o: 1.0.0
    
    Um sistema de monitoramento abrangente baseado em Python para freezers industriais com:
    - Monitoramento de temperatura em tempo real em m√∫ltiplas zonas
    - Alertas autom√°ticos por e-mail para condi√ß√µes cr√≠ticas
    - Registro e exporta√ß√£o de dados hist√≥ricos
    - Limites e configura√ß√µes totalmente personaliz√°veis
    - Interface de dashboard profissional constru√≠da com Streamlit
    
    **Componentes:**
    - Gerenciador de Configura√ß√£o: Gerencia todas as configura√ß√µes do sistema com persist√™ncia JSON
    - Simulador de Dados: Gera dados de temperatura realistas para testes
    - Notificador de E-mail: Envia alertas automatizados via SMTP
    - Logger de Dados: Gerencia registro CSV e dados hist√≥ricos
    - Dashboard: Interface web interativa para monitoramento e controle
    
    **Requisitos do Sistema:**
    - Python 3.11+
    - Streamlit
    - Plotly
    - Pandas
    
    ---
    
    *Desenvolvido para monitoramento de freezers industriais FAST BOMBAS*
    """)
    
    st.markdown("---")
    
    # Metadados do Sistema
    with st.expander("üìã Metadados do Sistema"):
        metadata = config.get('system_metadata')
        st.json(metadata)
